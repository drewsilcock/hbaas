package cmd

import (
	"fmt"
	"log"

	"github.com/drewsilcock/hbaas-server/version"

	"github.com/spf13/viper"

	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/go_bindata"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"github.com/labstack/echo/v4/middleware"
	"github.com/spf13/cobra"
	"golang.org/x/crypto/acme/autocert"

	_ "github.com/drewsilcock/hbaas-server/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/drewsilcock/hbaas-server/router"
)

func init() {
	rootCmd.AddCommand(runServerCmd)
}

var runServerCmd = &cobra.Command{
	Use:   "run-server",
	Short: "Run the HBaaS API server.",
	Long:  "Run the HBaaS API server providing a RESTful interface to all birthday greeting functionality.",
	Run:   runServer,
}

func runServer(cmd *cobra.Command, args []string) {
	db, err := gorm.Open("postgres", viper.Get("postgres_url"))
	if err != nil {
		log.Println("Failed to connect to database:", err, "; access to persistent storage will be disabled.")
	} else {
		defer db.Close()
	}

	e := router.New(db)

	// Middleware
	e.AutoTLSManager.Cache = autocert.DirCache("/var/www/.cache")
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	fmt.Println("Running server", version.Version, "built", version.BuildTime)
	fmt.Println("Environment is:", viper.GetString("env"))

	if environment == "prod" {
		go func() {
			e.Logger.Fatal(e.StartAutoTLS(":4443"))
		}()
	}

	e.Logger.Fatal(e.Start(":8000"))
}
